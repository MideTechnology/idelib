mide_ebml To-Do List
====================

*Note:* See also individual TODO items noted in the code ("TODO:" in comments,
"@todo" in doc strings. This list includes some of them, but not all.


Major items
-----------
Unit testing FTW. Some should be created prior to the refactoring-related items
listed below.

Refactor everything to use Numpy for parsing data. Early experiments with this
ran into a bottleneck somewhere, probably implicit casting of Numpy arrays to 
Python lists, so just changing the parser isn't enough.

Related to the above: Change things so that the EventList data for a parent
Channel returns a flat tuple/list/array/etc., rather than a time and a tuple.
Many things expect channels to have tuple values, though, so this will be
fairly substantial. However, making this change will allow for more use of
Numpy, which could make everything much faster.

Handle discontinuous data better. Possibly more of a viewer-side task, but it
will need backend support in the mide-ebml library. 

Consider implementing a subclass of EventList optimized for channels with
single-sample data blocks (i.e. pressure/temperature). There's a lot of
overhead in place for handling the subsamples in the accelerometer data blocks. 

Implement the use of a rolling mean for getting temperature data in calibration.
The getValueAt() method is a severe bottleneck. This is possibly part of
the single sample subclass mentioned above.


Minor items
-----------
The mix-in classes used in dataset.py are over-engineered. Identify the
required functionality and simplify.

Get rid of the vestigial remains of the 'with index' functionality in the 
EventLists. This was used for testing, but is no longer used by anything.

Identify stubs of functionality that were left over from early designs and
are no longer necessary.

Simplify the transform system. The whole thing with the 'hidden'
_transform attributes (so Channel.transform always shows the transform, even
if Channel.raw=True) is kind of nice, but overly complicated. The API is for
internal use only at this point, anyway. 


Longer term
-----------
Read sensor description data, rather than rely upon hard-coded values based on
the device type UID.

Support for streaming data.


Wish List items
---------------

Single-point events. Similar to an extreme case of discontinuity in the data.
These could be marks with non-numeric data (annotations, etc.), which would
just render in the viewer as something like a vertical line. 
